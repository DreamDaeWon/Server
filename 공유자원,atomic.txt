-- atomic --
멀티쓰레드 환경에서 전역변수를 사용할 때는 같은 타이밍에 하나의 전역변수를 사용하여 원치않는 결과가 나올 수도 있다.
이 때 유용한 키워드가 atomic키워드이다.

atomic은 전역변수 같이 멀티쓰레드에서 동시다발적으로 공유되어지는 자원에 접근하려고 할 때 
어떤 한 쓰레드에서 접근하여 사용중이면 다른 쓰레드에서는 접근이 불가하도록 하는 문법이다.

int형 변수를 atomic을 사용하여 바꾼다고 하면

#include<atomic> 를 포함시켜주고

atomic<int> 변수이름 {};

이런식으로 선언하여 사용한다.

다만 남발해서는 안된다.

atomic은 클래스로 분류되며, 연산자 오버로딩을 통해서 동작한다.

또한 클래스로 분류되어지기 때문에 변수이름 뒤에 .을 찍으면 다양한 기능들을 볼 수 있다.

atomic 문법은 어떻게 보면 교통정리를 해주는 문법이기 때문에

결과는 같지만 기본 int와는 아예 다른 과정으로 동작하여,

기본 int를 사용할 때보다 훨씬 무겁게 동작한다.



-- 멀티쓰레드 코드를 보는 눈 기르기 --
메모리 구조 중에서 code data heap stack 가 있는데

data heap 이 두 곳에있는 데이터는 공유해서 사용할 수 있기 때문에 이 위치에 있는 자원은 사용할 때 주의해야 한다.

그러나 무조건적으로 data 나 heap 영역에 있다고 해서 주의해야하는 것이 아니라 그 중 공유되어지는 자원을 주의해야 하는 것이다.

이 공유되어지는 자원을 메모리 구조측면에서 파악하는 눈을 기르는 것이 핵심이다.






