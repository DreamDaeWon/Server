-- Cpu와 캐시 --

Cpu 안에는 레지스터와 단계별로 나누어진 캐시가 들어있다.

레지스터는 가장 용량이 작지만 그만큼 액세스 속도가 빠르다.

캐시는 그와 반대로 용량이 레지스터보다 크지만 속도가 느리다.

즉, 액세스 속도와 용량은 반비례 하는 특징이 있다는 것을 알 수 있다.


캐시에 데이터가 들어올 때는 캐시 철학에 따라서 들어오는데, 캐시 철학에는 시간적, 공간적 특징을 기준으로 들어온다.


시간적 - 최근에 접근한 메모리는 다시 접근할 확률이 높다.

공간적 - 내가 접근한 메모리 근처에 있는 다른 메모리도 접근할 확률이 높다.

이 두 가지를 기준으로 가져온다.


그래서 실제로 크기가 큰 이차원 배열을 접근할 때 행을 내려가면서 접근하는 것보다 열 단위로 한 칸 한 칸 이동하면서 접근하는 것이 더 빠르다고 볼 수 있다. 캐시가 주변 데이터를 불러오기 때문이다.



-- 명령어 파이프라인 --
컴퓨터 구조에는 명령어 파이프라인이 있다.

이것은 크게 인출(Fetch), 해석(Decode), 실행(Execute), 복귀(저장)(Write-Back) 이렇게 4가지가 있다.

근데 이 파이프라인을 돌 때 연산하고 처리하는 것은 cpu가 하기 때문에 cpu입장에서 어떤 명령어집합(인스트럭션)을 받을 때 
cpu 입장에서 서로 상호작용이 없는 독립적인 명령이라고 판단한다면 cpu가 임의적으로 명령의 순서를 바꾸어 실행할 수 있다.

앞으로 싱글쓰레드에서 넘어올 때 이런 문제가 발생할 수 있다.

 

-- 컴파일러 자체 최적화와 volatile 키워드 --
멀티쓰레드 환경에서 드물게 변수 앞에 volatile이라는 키워드가 붙어있는 것을 볼 수 있는데 ex) volatile bool A;


예를들어

bool a = false;

while(a == false)
{

}
이렇게 되어있을 때 컴파일러가 판단했을 때 저 while문을 영영 빠져나올 수 없다고 판단하여

bool a = false;

while(false)
{
}
이런식으로 코드를 바꿔버릴 수 있다.

컴파일러 입장에서는 코드 상의 문제도 없고 나름 최적화를 위해 저런식으로 바꿀 수 있지만 우리 입장에서 나중에 문제가 발생할 수 있다고 했을 때는 volatile 키워드를 붙여서

volatile bool A = false;
이런 식으로 volatile 키워드를 붙여주면 이 변수는 휘발성 즉 언제든지 바뀔 수 있는 변수니까 코드 최적화를 하지 말아 달라고 하는 것이다.

 

하지만 이 키워드는 C++이나 C#이렇게 언어에 따라서 의미가 조금씩 달라지기 때문에 혼동할 수 있어 많이 쓰지 않는 것을 권장한다.

